%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Apr 18 14:53:12 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCAGUUUUUUACUCUUCCACUCUCUUUUCUAUAUUUUGCCCAUCGGGGCUGCGGAUACCUGGUUUUAUUAUUUUUUCUUUGCCCAACGGGGCCGUGGAUACCUGCCUUUUAAUUCUUUUUUAUUCGCCCAUCGGGGCCGCGGAUACCUG\
) } def
/len { sequence length } bind def

/coor [
[109.39276123 136.77946472]
[102.84488678 150.27485657]
[96.29701996 163.77023315]
[101.23888397 178.54235840]
[94.40615845 192.13533020]
[80.29273987 196.75559998]
[73.74487305 210.25099182]
[67.19699860 223.74636841]
[71.07152557 239.31452942]
[61.20158768 251.96220398]
[45.15855408 251.98719788]
[35.24926758 239.37031555]
[39.07528687 223.79016113]
[53.70161438 217.19850159]
[60.24948502 203.70310974]
[66.79735565 190.20773315]
[61.69178009 176.26252747]
[68.14000702 162.48301697]
[82.80163574 157.22236633]
[89.34950256 143.72698975]
[95.89737701 130.23159790]
[93.04504395 123.29515839]
[80.82871246 131.99925232]
[68.61238861 140.70335388]
[56.39605713 149.40745544]
[44.17972946 158.11154175]
[35.88494110 170.60940552]
[22.74735832 177.84846497]
[7.75112057 178.18438721]
[-5.69744396 171.54089355]
[-14.54355526 159.42700195]
[-16.77785873 144.59432983]
[-11.89284229 130.41206360]
[-0.99811584 120.10164642]
[13.43163300 116.00502014]
[28.11826515 119.05249023]
[42.92379379 116.64493561]
[57.72932434 114.23738098]
[72.53485107 111.82983398]
[87.34038544 109.42227936]
[84.48805237 102.48583984]
[70.34073639 97.50051880]
[56.19341660 92.51519012]
[42.04610062 87.52986908]
[26.03437996 91.07344055]
[15.16076851 78.79758453]
[20.61110306 63.33065414]
[36.77854919 60.58370209]
[47.03142166 73.38255310]
[61.17873764 78.36787415]
[75.32605743 83.35320282]
[89.47337341 88.33852386]
[104.27145386 85.88558960]
[116.05358887 76.60221100]
[127.83572388 67.31882477]
[139.61785889 58.03543854]
[151.39999390 48.75205231]
[152.06582642 37.81769562]
[158.53503418 29.25185966]
[168.45440674 25.76641464]
[178.43257141 28.29493141]
[190.58589172 19.50308990]
[202.73922729 10.71124744]
[214.89256287 1.91940451]
[227.04589844 -6.87243795]
[239.19923401 -15.66428089]
[231.70794678 -29.84984207]
[226.33384705 -44.96287537]
[223.18798828 -60.68939209]
[222.33509827 -76.70274353]
[223.79232788 -92.67041016]
[227.52882385 -108.26090240]
[233.46644592 -123.15065765]
[241.48136902 -137.03071594]
[251.40666199 -149.61318970]
[263.03579712 -160.63719177]
[276.12692261 -169.87422180]
[290.40789795 -177.13299561]
[305.58190918 -182.26330566]
[321.33374023 -185.15917969]
[337.33618164 -185.76106262]
[353.25701904 -184.05703735]
[368.76568604 -180.08306885]
[383.54034424 -173.92222595]
[391.17330933 -186.83493042]
[398.80627441 -199.74761963]
[406.43927002 -212.66032410]
[406.06646729 -229.05523682]
[420.21716309 -237.34317017]
[434.33432007 -228.99822998]
[433.89541626 -212.60494995]
[419.35195923 -205.02735901]
[411.71899414 -192.11465454]
[404.08602905 -179.20195007]
[396.45303345 -166.28926086]
[413.34765625 -152.02687073]
[427.08300781 -134.70106506]
[440.22463989 -141.93276978]
[453.36627197 -149.16447449]
[466.50790405 -156.39617920]
[474.52978516 -170.69937134]
[490.92880249 -170.63323975]
[498.83505249 -156.26580811]
[490.11526489 -142.37704468]
[473.73959351 -143.25454712]
[460.59796143 -136.02284241]
[447.45632935 -128.79113770]
[434.31469727 -121.55943298]
[439.04812622 -109.66075897]
[442.38110352 -97.29528046]
[444.26907349 -84.62725067]
[444.68670654 -71.82494354]
[443.62814331 -59.05846786]
[441.10720825 -46.49749374]
[437.15713501 -34.30897141]
[431.83016968 -22.65494728]
[425.19680786 -11.69038868]
[417.34500122 -1.56112826]
[408.37887573 7.59807491]
[398.41735840 15.66532707]
[387.59262085 22.53322220]
[376.04843140 28.11027718]
[363.93798828 32.32214355]
[351.42218018 35.11259842]
[338.66723633 36.44430542]
[325.84262085 36.29929733]
[313.11874390 34.67923737]
[300.66470337 31.60538101]
[288.64602661 27.11831665]
[277.22256470 21.27741432]
[266.54620361 14.16004753]
[256.75897217 5.86056805]
[247.99107361 -3.51094770]
[235.83773804 5.28089476]
[223.68440247 14.07273769]
[211.53108215 22.86458015]
[199.37774658 31.65642357]
[187.22441101 40.44826508]
[180.70954895 58.61565018]
[160.68338013 60.53418732]
[148.90124512 69.81757355]
[137.11911011 79.10095978]
[125.33697510 88.38434601]
[113.55484009 97.66773224]
[126.49921417 90.08860779]
[141.48759460 89.49845123]
[154.98782349 96.03634644]
[163.81840515 108.16156006]
[165.89833069 123.01665497]
[160.73744202 137.10087585]
[149.55195618 147.09512329]
[134.97785950 150.64413452]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[6 16]
[7 15]
[8 14]
[41 52]
[42 51]
[43 50]
[44 49]
[53 144]
[54 143]
[55 142]
[56 141]
[57 140]
[61 138]
[62 137]
[63 136]
[64 135]
[65 134]
[66 133]
[84 95]
[85 94]
[86 93]
[87 92]
[97 108]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
