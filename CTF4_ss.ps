%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Apr 18 14:53:24 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCAGUUUUUUACUCUUCCACUCUCUUUUCUAUAUUUUGCCCAUCGGGGCUGCGGAUACCUGGUUUUAUUAUUUUUUCUUUGCCCAACGGGGCCGUGGAUACCUGCCUUUUAAUUCUUUUUUAUUCGCCCAUCGGGGCCGCGGAUACCUGCUUUUUAUUUUUUUUUCCUUAGCCCAUCGGGGUAUCGGAUACCUG\
) } def
/len { sequence length } bind def

/coor [
[-63.59555817 480.31042480]
[-68.72586060 494.40579224]
[-73.85616302 508.50119019]
[-67.42638397 522.68908691]
[-72.83003235 536.91070557]
[-86.39562225 542.95306396]
[-91.52592468 557.04846191]
[-96.65622711 571.14385986]
[-91.20658112 586.23297119]
[-99.72834015 599.82556152]
[-115.68433380 601.49462891]
[-126.83449554 589.95971680]
[-124.62537384 574.06951904]
[-110.75161743 566.01354980]
[-105.62131500 551.91815186]
[-100.49101257 537.82275391]
[-106.99889374 524.47424316]
[-101.99683380 510.10644531]
[-87.95155334 503.37088013]
[-82.82125092 489.27548218]
[-77.69094849 475.18011475]
[-88.70104980 468.83886719]
[-98.55930328 460.81860352]
[-107.01197815 451.32452393]
[-113.84133911 440.59973145]
[-118.87123871 428.91906738]
[-121.97164917 416.58212280]
[-123.06204987 403.90536499]
[-122.11348724 391.21420288]
[-119.14936829 378.83459473]
[-114.24487305 367.08456421]
[-107.52503967 356.26620483]
[-99.16160583 346.65774536]
[-89.36856842 338.50656128]
[-78.39678192 332.02267456]
[-66.52744293 327.37332153]
[-54.06497574 324.67883301]
[-41.32914352 324.00927734]
[-28.64690399 325.38281250]
[-16.34398079 328.76510620]
[-9.89705658 315.22122192]
[-3.45013261 301.67730713]
[2.99679089 288.13342285]
[9.44371510 274.58950806]
[0.88513982 262.39868164]
[-0.43103611 247.46136475]
[5.94841576 233.78039551]
[18.40096474 225.07229614]
[33.63970947 223.75781250]
[40.08663559 210.21391296]
[46.53355789 196.67001343]
[52.98048019 183.12611389]
[59.42740631 169.58222961]
[65.87432861 156.03833008]
[64.35823059 141.22108459]
[77.27568817 132.08599854]
[83.72261047 118.54209137]
[90.16953278 104.99819183]
[84.97909546 103.19572449]
[80.33968353 98.99402618]
[77.14348602 92.63120270]
[67.68519592 80.98900604]
[58.22690582 69.34680939]
[43.51989365 63.51462555]
[41.49995422 48.75762558]
[32.04166412 37.11542511]
[22.58337593 25.47323036]
[8.65607166 31.32189560]
[-6.35499239 33.00850296]
[-21.23293686 30.39632607]
[-34.77167130 23.69712448]
[-45.87367630 13.45396996]
[-53.63895416 0.49723011]
[-57.43801880 -14.12274933]
[-56.96288681 -29.22079277]
[-52.25208282 -43.57297134]
[-43.68748474 -56.01581573]
[-31.96339035 -65.54064178]
[-18.03021812 -71.37531281]
[-3.01746702 -73.04683685]
[11.85784531 -70.41971588]
[25.38984489 -63.70691681]
[36.48155212 -53.45261383]
[44.23381042 -40.48807907]
[48.01818466 -25.86429024]
[47.52788544 -10.76673126]
[42.80266571 3.58070660]
[34.22557068 16.01494026]
[43.68386078 27.65713692]
[53.14215088 39.29933548]
[67.17264557 44.29878616]
[69.86910248 59.88851547]
[79.32739258 71.53071594]
[88.78568268 83.17291260]
[103.78520966 83.05390930]
[113.05759430 71.26311493]
[122.32997894 59.47231674]
[131.60237122 47.68152237]
[140.87475586 35.89072418]
[150.14714050 24.09992981]
[148.23249817 13.37912655]
[152.45289612 3.57849431]
[161.19027710 -2.15579128]
[171.42153931 -2.12891769]
[181.06335449 -13.61958408]
[190.70516968 -25.11025047]
[200.34698486 -36.60091782]
[192.83259583 -50.80942535]
[191.34736633 -66.77516937]
[196.08915710 -82.05235291]
[206.30415344 -94.31203461]
[220.40655518 -101.69717407]
[236.22471619 -103.10387421]
[251.33552551 -98.34632874]
[260.79382324 -109.98852539]
[270.25210571 -121.63072205]
[266.12979126 -136.59020996]
[271.61923218 -151.10385132]
[284.60964966 -159.59083557]
[300.10592651 -158.78776550]
[312.14944458 -149.00343323]
[316.10922241 -134.00012207]
[310.46264648 -119.54688263]
[297.38095093 -111.20130920]
[281.89428711 -112.17243195]
[272.43600464 -100.53023529]
[262.97772217 -88.88803864]
[270.12152100 -76.80259705]
[272.71484375 -62.97484207]
[270.42581177 -49.06319427]
[263.50952148 -36.74322128]
[252.77954102 -27.50583458]
[239.51234436 -22.47688103]
[225.29550171 -22.27994728]
[211.83766174 -26.95910454]
[202.19584656 -15.46843719]
[192.55403137 -3.97777033]
[182.91221619 7.51289654]
[180.96839905 26.74490356]
[161.93792725 33.37231445]
[152.66554260 45.16310883]
[143.39315796 56.95390701]
[134.12077332 68.74470520]
[124.84838867 80.53549957]
[115.57600403 92.32629395]
[127.10363770 82.72869873]
[140.68838501 76.36832428]
[155.44204712 73.66103363]
[170.39997864 74.78384399]
[184.58413696 79.66333771]
[197.06713867 87.98046875]
[207.03277588 99.19144440]
[213.82948303 112.56324005]
[217.01283264 127.22155762]
[216.37471008 142.20797729]
[211.95681763 156.54263306]
[204.04803467 169.28826904]
[193.16546631 179.61151123]
[180.02064514 186.83741760]
[165.47302246 190.49349976]
[150.47380066 190.34072876]
[136.00367737 186.38908386]
[123.00876617 178.89692688]
[112.33872223 168.35415649]
[104.69119263 155.45007324]
[100.56620789 141.02841187]
[100.23347473 126.03209686]
[103.71343231 111.44512177]
[97.26651001 124.98901367]
[90.81958771 138.53291321]
[91.87455750 154.31890869]
[79.41822815 162.48524475]
[72.97130585 176.02914429]
[66.52437592 189.57304382]
[60.07745743 203.11694336]
[53.63053131 216.66084290]
[47.18360901 230.20474243]
[55.77220917 242.86108398]
[56.86544418 258.01699829]
[50.26958466 271.59497070]
[37.84611511 279.99218750]
[22.98761368 281.03643799]
[16.54068947 294.58032227]
[10.09376526 308.12423706]
[3.64684176 321.66812134]
[-2.80008197 335.21203613]
[11.10396862 345.78256226]
[22.36496353 359.12576294]
[30.44305992 374.59786987]
[34.95187759 391.45324707]
[35.67698669 408.88021851]
[32.58610153 426.04016113]
[25.83050537 442.10781860]
[15.73765182 456.31115723]
[2.79529095 467.96826172]
[-12.37209892 476.52011108]
[-29.03344345 481.55758667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[6 16]
[7 15]
[8 14]
[40 186]
[41 185]
[42 184]
[43 183]
[44 182]
[49 177]
[50 176]
[51 175]
[52 174]
[53 173]
[54 172]
[56 170]
[57 169]
[58 168]
[61 94]
[62 93]
[63 92]
[65 90]
[66 89]
[67 88]
[95 145]
[96 144]
[97 143]
[98 142]
[99 141]
[100 140]
[104 138]
[105 137]
[106 136]
[107 135]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
