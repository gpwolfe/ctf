%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Sun Apr 18 14:52:51 2021
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAUCAGUUUUUUACUCUUCCACUCUCUUUUCUAUAUUUUGCCCAUCGGGGCUGCGGAUACCUGGUUUUAUUAUUUUUUCUUUGCCCAACGGGGCCGUGGAUACCUG\
) } def
/len { sequence length } bind def

/coor [
[55.59353256 172.20771790]
[46.63615417 184.23956299]
[37.67877579 196.27140808]
[39.76931000 211.70732117]
[30.51385307 223.78172302]
[15.78518581 225.67961121]
[6.82780743 237.71145630]
[-2.12957144 249.74330139]
[-1.23646879 265.76147461]
[-13.29862785 276.33898926]
[-29.06299210 273.36169434]
[-36.43649292 259.11349487]
[-29.76280785 244.52439880]
[-14.16141987 240.78591919]
[-5.20404053 228.75407410]
[3.75333834 216.72222900]
[1.34725511 202.06799316]
[10.25991249 189.73838806]
[25.64692688 187.31402588]
[34.60430527 175.28218079]
[43.56168365 163.25033569]
[34.36910629 153.65141296]
[26.78986168 142.73364258]
[21.01025963 130.76539612]
[17.17237663 118.04087067]
[15.37055206 104.87287140]
[15.64908123 91.58509064]
[18.00111580 78.50415802]
[22.36883736 65.95163727]
[28.64488220 54.23609161]
[36.67496872 43.64550781]
[46.26170731 34.44022369]
[57.16943359 26.84652519]
[69.13002014 21.05107689]
[81.84944153 17.19634438]
[95.01504517 15.37708092]
[108.30318451 15.63801003]
[121.38721466 17.97271729]
[133.94551086 22.32381058]
[145.66935730 28.58433151]
[156.27056885 36.60038376]
[167.18118286 26.30676079]
[178.09178162 16.01313591]
[189.00238037 5.71951151]
[185.57502747 -9.18687916]
[190.03959656 -23.71149063]
[201.10137939 -33.98298645]
[215.72142029 -37.31619263]
[229.95104980 -32.91356277]
[240.86166382 -43.20718765]
[251.77226257 -53.50081253]
[262.68286133 -63.79443741]
[261.53225708 -77.30722046]
[268.31909180 -88.82208252]
[280.34146118 -94.20052338]
[293.06582642 -91.66234589]
[304.27120972 -101.63428497]
[315.47656250 -111.60621643]
[309.00793457 -125.25661469]
[306.64840698 -140.17671204]
[308.58932495 -155.15701294]
[314.67333984 -168.98313904]
[324.40722656 -180.53425598]
[337.00189209 -188.87397766]
[351.43637085 -193.32621765]
[366.54049683 -193.53007507]
[381.08987427 -189.46902466]
[393.90505981 -181.47227478]
[403.94714355 -170.18806458]
[410.40206909 -156.53118896]
[412.74658203 -141.60871887]
[410.79061890 -126.63037109]
[404.69274902 -112.81037140]
[394.94726562 -101.26903534]
[382.34420776 -92.94197845]
[367.90527344 -88.50423431]
[352.80093384 -88.31554413]
[338.25564575 -92.39121246]
[325.44851685 -100.40084076]
[314.24313354 -90.42890930]
[303.03775024 -80.45697021]
[302.82528687 -63.71087265]
[290.37362671 -52.01518631]
[272.97650146 -52.88383484]
[262.06588745 -42.59020996]
[251.15528870 -32.29658508]
[240.24467468 -22.00296021]
[243.81246948 -7.54141092]
[239.63482666 6.86008978]
[228.73753357 17.30591393]
[213.97789001 20.91840363]
[199.29600525 16.63011551]
[188.38540649 26.92374039]
[177.47479248 37.21736526]
[166.56419373 47.51099014]
[175.63764954 61.72684479]
[181.71736145 77.45755005]
[184.56268311 94.08049011]
[184.06101990 110.93772125]
[180.23220825 127.36204529]
[173.22779846 142.70336914]
[163.32502747 156.35449219]
[150.91584778 167.77510071]
[136.49142456 176.51316833]
[120.62265778 182.22283936]
[103.93764496 184.67811584]
[87.09677887 183.78182983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 21]
[2 20]
[3 19]
[6 16]
[7 15]
[8 14]
[41 95]
[42 94]
[43 93]
[44 92]
[49 87]
[50 86]
[51 85]
[52 84]
[56 81]
[57 80]
[58 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
